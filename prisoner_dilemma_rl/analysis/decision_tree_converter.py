"""
DecisionTreeConverter for approximating neural network behavior with a decision tree.
Improvements:
- Added type hints and docstrings
- Used logging instead of print
- Error handling for training and summarization
"""
import logging
from typing import List, Optional
from sklearn.tree import DecisionTreeClassifier, export_text
import numpy as np

class DecisionTreeConverter:
    def __init__(self) -> None:
        self.dt_classifier: Optional[DecisionTreeClassifier] = None

    def convert_nn_to_decision_tree(self, neural_network: any, input_data: np.ndarray, agent_choices: List[str]) -> DecisionTreeClassifier:
        """
        Trains a scikit-learn DecisionTreeClassifier on data generated by the neural network.
        Args:
            neural_network: The agent's neural network (not used directly, but for context).
            input_data (np.ndarray): Features (e.g., historical interactions).
            agent_choices (List[str]): The agent's decisions ("cooperate" or "defect").
        Returns:
            DecisionTreeClassifier: The trained decision tree classifier.
        """
        try:
            logging.info("Training Decision Tree to approximate Neural Network behavior...")
            numerical_choices = np.array([1 if choice == "cooperate" else 0 for choice in agent_choices])
            self.dt_classifier = DecisionTreeClassifier(max_depth=5, random_state=42)
            self.dt_classifier.fit(input_data, numerical_choices)
            logging.info("Decision Tree training complete.")
            return self.dt_classifier
        except Exception as e:
            logging.error(f"Failed to train Decision Tree: {e}")
            raise

    def summarize_tree(self, feature_names: List[str]) -> str:
        """
        Summarizes the trained decision tree by extracting its rules.
        Args:
            feature_names (List[str]): Names for each input feature.
        Returns:
            str: Human-readable rules of the decision tree.
        """
        if self.dt_classifier is None:
            return "No decision tree has been trained yet."
        try:
            logging.info("Extracting rules from the Decision Tree...")
            tree_rules = export_text(self.dt_classifier, feature_names=feature_names)
            return tree_rules
        except Exception as e:
            logging.error(f"Failed to summarize Decision Tree: {e}")
            return f"Error summarizing tree: {e}"